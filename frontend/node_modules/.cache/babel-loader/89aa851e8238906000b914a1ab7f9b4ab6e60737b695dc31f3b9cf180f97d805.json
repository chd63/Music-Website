{"ast":null,"code":"var _jsxFileName = \"/home/dev/fall2024/cs312/musicWebsite/frontend/src/MusicPlayer/MusicPlayer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport axios from 'axios';\nimport './MusicPlayer.css'; // Import the CSS for styling\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MusicPlayer = ({\n  songId\n}) => {\n  _s();\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentSongUrl, setCurrentSongUrl] = useState(null);\n  const audioRef = useRef(null);\n  const ENDPOINT = process.env.REACT_APP_API_ENDPOINT;\n\n  // Fetch the song's streaming URL when the songId changes\n  useEffect(() => {\n    const fetchSongStream = async () => {\n      try {\n        const response = await axios.get(ENDPOINT + `/api/songs/streamSongById`, {\n          params: {\n            songId\n          }\n        });\n        // Create a blob URL for the song stream\n        const audioUrl = URL.createObjectURL(response.data);\n        setCurrentSongUrl(audioUrl); // Set the URL to play the song\n      } catch (error) {\n        console.error('Error fetching song stream:', error);\n      }\n    };\n    if (songId) {\n      fetchSongStream();\n    }\n  }, [songId]);\n  useEffect(() => {\n    // When the song URL is ready, start playing the song\n    if (audioRef.current && currentSongUrl) {\n      audioRef.current.load();\n      audioRef.current.play();\n    }\n  }, [currentSongUrl]); // Trigger play whenever the song URL changes\n\n  const togglePlayPause = () => {\n    const audio = audioRef.current;\n    if (isPlaying) {\n      audio.pause();\n    } else {\n      audio.play();\n    }\n    setIsPlaying(!isPlaying);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"music-player\",\n    children: currentSongUrl ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n        ref: audioRef,\n        src: currentSongUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: isPlaying ? 'square' : 'triangle',\n          onClick: togglePlayPause\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Select a song to play\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n};\n_s(MusicPlayer, \"oWLSLNvTIp29+CyHgIKuWDnQANQ=\");\n_c = MusicPlayer;\nexport default MusicPlayer;\nvar _c;\n$RefreshReg$(_c, \"MusicPlayer\");","map":{"version":3,"names":["React","useState","useRef","useEffect","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","MusicPlayer","songId","_s","isPlaying","setIsPlaying","currentSongUrl","setCurrentSongUrl","audioRef","ENDPOINT","process","env","REACT_APP_API_ENDPOINT","fetchSongStream","response","get","params","audioUrl","URL","createObjectURL","data","error","console","current","load","play","togglePlayPause","audio","pause","className","children","ref","src","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/dev/fall2024/cs312/musicWebsite/frontend/src/MusicPlayer/MusicPlayer.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport axios from 'axios';\nimport './MusicPlayer.css';  // Import the CSS for styling\n\nconst MusicPlayer = ({ songId }) => {\n    const [isPlaying, setIsPlaying] = useState(false);\n    const [currentSongUrl, setCurrentSongUrl] = useState(null);\n    const audioRef = useRef(null);\n    const ENDPOINT = process.env.REACT_APP_API_ENDPOINT;\n\n    // Fetch the song's streaming URL when the songId changes\n    useEffect(() => {\n        const fetchSongStream = async () => {\n            try {\n                const response = await axios.get(ENDPOINT + `/api/songs/streamSongById`, {\n                    params: { songId }\n                });\n                // Create a blob URL for the song stream\n                const audioUrl = URL.createObjectURL(response.data);\n                setCurrentSongUrl(audioUrl); // Set the URL to play the song\n            } catch (error) {\n                console.error('Error fetching song stream:', error);\n            }\n        };\n\n        if (songId) {\n            fetchSongStream();\n        }\n    }, [songId]);\n\n    useEffect(() => {\n        // When the song URL is ready, start playing the song\n        if (audioRef.current && currentSongUrl) {\n            audioRef.current.load();\n            audioRef.current.play();\n        }\n    }, [currentSongUrl]); // Trigger play whenever the song URL changes\n\n    const togglePlayPause = () => {\n        const audio = audioRef.current;\n        if (isPlaying) {\n            audio.pause();\n        } else {\n            audio.play();\n        }\n        setIsPlaying(!isPlaying);\n    };\n\n    return (\n        <div className=\"music-player\">\n            {currentSongUrl ? (\n                <>\n                    <audio ref={audioRef} src={currentSongUrl} />\n                    <div className=\"button-container\">\n                        <div className={isPlaying ? 'square' : 'triangle'} onClick={togglePlayPause}></div>\n                    </div>\n                </>\n            ) : (\n                <p>Select a song to play</p>\n            )}\n        </div>\n    );\n};\n\nexport default MusicPlayer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}