{"ast":null,"code":"var _jsxFileName = \"/home/dev/fall2024/cs312/musicWebsite/frontend/src/MusicPlayer/MusicPlayer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport axios from 'axios';\nimport './MusicPlayer.css'; // Import the CSS for styling\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MusicPlayer = ({\n  songId\n}) => {\n  _s();\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [audioUrl, setAudioUrl] = useState(null);\n  const audioRef = useRef(null);\n  const ENDPOINT = process.env.REACT_APP_API_ENDPOINT;\n\n  // Fetch the song's streaming URL when the songId changes\n  useEffect(() => {\n    const fetchSongStream = async () => {\n      try {\n        const response = await axios.get(ENDPOINT + `/api/songs/streamSongById`, {\n          params: {\n            songId\n          },\n          responseType: 'blob' // Expect binary data from the backend\n        });\n\n        // Directly assign the audio source without URL.createObjectURL\n        const audioBlob = response.data;\n        const audioUrl = URL.createObjectURL(audioBlob);\n        setAudioUrl(audioUrl); // Set the audio URL to play the song\n      } catch (error) {\n        console.error('Error fetching song stream:', error);\n      }\n    };\n    if (songId) {\n      fetchSongStream();\n    }\n  }, [songId]);\n  useEffect(() => {\n    // When the song URL is ready, start playing the song\n    if (audioRef.current && audioUrl) {\n      audioRef.current.load();\n      audioRef.current.play();\n    }\n  }, [audioUrl]); // Trigger play whenever the song URL changes\n\n  const togglePlayPause = () => {\n    const audio = audioRef.current;\n    if (isPlaying) {\n      audio.pause();\n    } else {\n      audio.play();\n    }\n    setIsPlaying(!isPlaying);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"music-player\",\n    children: audioUrl ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n        ref: audioRef,\n        src: audioUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: isPlaying ? 'square' : 'triangle',\n          onClick: togglePlayPause\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Select a song to play\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n_s(MusicPlayer, \"nL0stkHL4kqpRDvqTHqiyKU6IFI=\");\n_c = MusicPlayer;\nexport default MusicPlayer;\nvar _c;\n$RefreshReg$(_c, \"MusicPlayer\");","map":{"version":3,"names":["React","useState","useRef","useEffect","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","MusicPlayer","songId","_s","isPlaying","setIsPlaying","audioUrl","setAudioUrl","audioRef","ENDPOINT","process","env","REACT_APP_API_ENDPOINT","fetchSongStream","response","get","params","responseType","audioBlob","data","URL","createObjectURL","error","console","current","load","play","togglePlayPause","audio","pause","className","children","ref","src","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/dev/fall2024/cs312/musicWebsite/frontend/src/MusicPlayer/MusicPlayer.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport axios from 'axios';\nimport './MusicPlayer.css';  // Import the CSS for styling\n\nconst MusicPlayer = ({ songId }) => {\n    const [isPlaying, setIsPlaying] = useState(false);\n    const [audioUrl, setAudioUrl] = useState(null);\n    const audioRef = useRef(null);\n    const ENDPOINT = process.env.REACT_APP_API_ENDPOINT;\n\n    // Fetch the song's streaming URL when the songId changes\n    useEffect(() => {\n        const fetchSongStream = async () => {\n            try {\n                const response = await axios.get(ENDPOINT + `/api/songs/streamSongById`, {\n                    params: { songId },\n                    responseType: 'blob'  // Expect binary data from the backend\n                });\n\n                // Directly assign the audio source without URL.createObjectURL\n                const audioBlob = response.data;\n                const audioUrl = URL.createObjectURL(audioBlob);\n                setAudioUrl(audioUrl); // Set the audio URL to play the song\n            } catch (error) {\n                console.error('Error fetching song stream:', error);\n            }\n        };\n\n        if (songId) {\n            fetchSongStream();\n        }\n    }, [songId]);\n\n    useEffect(() => {\n        // When the song URL is ready, start playing the song\n        if (audioRef.current && audioUrl) {\n            audioRef.current.load();\n            audioRef.current.play();\n        }\n    }, [audioUrl]); // Trigger play whenever the song URL changes\n\n    const togglePlayPause = () => {\n        const audio = audioRef.current;\n        if (isPlaying) {\n            audio.pause();\n        } else {\n            audio.play();\n        }\n        setIsPlaying(!isPlaying);\n    };\n\n    return (\n        <div className=\"music-player\">\n            {audioUrl ? (\n                <>\n                    <audio ref={audioRef} src={audioUrl} />\n                    <div className=\"button-container\">\n                        <div className={isPlaying ? 'square' : 'triangle'} onClick={togglePlayPause}></div>\n                    </div>\n                </>\n            ) : (\n                <p>Select a song to play</p>\n            )}\n        </div>\n    );\n};\n\nexport default MusicPlayer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}